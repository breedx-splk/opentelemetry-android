---
name: Release

on:
  workflow_dispatch:
    inputs:
      branch_specifier:
        description: The branch to release e.g. release/vX.Y.Z
        required: true
        default: "main"
        type: string

jobs:
  release:
    name: "release"
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ $GITHUB_REF_NAME != release/* ]]; then
            echo This workflow can only be run against release branches
            exit 1
          fi
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_specifier }}

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          echo "VERSION=$version" >> $GITHUB_ENV
          inst_version=$(grep ^opentelemetry-alpha gradle/libs.versions.toml | sed -E "s/^.*\"(.*)\"/\1/")
          echo "INST_VERSION=$inst_version" >> $GITHUB_ENV
          sdk_version=$(cat gradle/libs.versions.toml  | grep "^opentelemetry =" | sed -E "s/^.*\"(.*)\"/\1/")
          echo "OTEL_SDK_VERSION=$sdk_version" >> $GITHUB_ENV

      - name: Check that change log update was merged to main
        run: |
          if [[ $VERSION == *.0 ]]; then
            # not making a patch release
            if ! grep --quiet "^## Version $VERSION " CHANGELOG.md; then
              echo the pull request generated by prepare-release-branch.yml needs to be merged first
              exit 1
            fi
          fi

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build and publish artifacts
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository -Pfinal=true
        env:
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_KEY: ${{ secrets.SONATYPE_KEY }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

      - name: Generate release notes
        run: |
          echo ok

      - name: Create release tag for release builds
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
        if: "${{ inputs.release_type == 'final' }}"
        run: |
          VERSION_NUMBER=$(grep ^version= gradle.properties  | sed -e 's/^.*=//')
          VERSION="v${VERSION_NUMBER}"
          git tag ${VERSION}
          git push origin ${VERSION}

