package io.opentelemetry.gradle
import gradle.kotlin.dsl.accessors._b50051ccebdf90c715b457fc4cb6bce4.android
import org.gradle.api.Plugin
import org.gradle.api.Project
import java.io.File

/**
 * This gradle plugin will define a new task called generateOtelAndroidVersionClass.
 * This task generates a Java source file that contains the project version
 * as a string constant. The "compileJava" task is updated to depend on
 * generateOtelVersionClass, and the project source set is updated to
 * include the new file.
 */
class OtelAndroidVersionClassPlugin : Plugin<Project> {
  override fun apply(project: Project) {

    project.afterEvaluate {

      val genTask = project.task("generateOtelAndroidVersionClass") {
        doLast {
          writeFile(project)
        }
      }

      project.android.libraryVariants.all { variant ->
        val sourceDir: File = buildOutDir(project)
        val taskProvider = project.tasks.named(genTask.name)
        variant.registerJavaGeneratingTask(taskProvider, sourceDir)
        true
      }
    }
  }

  private fun writeFile(project: Project) {
    val group = "${project.group}".replace('.', '/')
    val projectName = project.name.replace('-', '/')
    val outDir = buildOutDir(project)
    val filename = "$group/$projectName/internal/OtelAndroidVersion.java"
    val outFile = File(outDir, filename)
    val packageName = "${project.group}.${project.name.replace('-', '.')}.internal"
    val classBody = getClassBody("${project.version}", packageName)

    outFile.parentFile.mkdirs()
    outFile.writeText(classBody)
  }

  private fun getClassBody(version: String, packageName: String): String {
    return """
      package $packageName;
      
      import javax.annotation.Generated;
      
      /** Autogenerated class do not edit. */
      @Generated("io.opentelemetry.gradle.OtelAndroidVersionClassPlugin")
      public final class OtelAndroidVersion {
        public static final String VERSION = "$version";

        private OtelAndroidVersion() {}
      }
    """.trimIndent()
  }

  private fun buildOutDir(project: Project): File {
    return File(project.layout.buildDirectory.asFile.get(), "generated/sources/version/java/main")
  }
}
